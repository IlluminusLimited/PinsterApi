# frozen_string_literal: true

require 'openssl'
require 'base64'

module Utilities
  class ImageServiceTokenFactory
    attr_reader :public_key, :iss, :aud

    def initialize(opts = {})
      @public_key = opts[:public_key] ||= OpenSSL::PKey::RSA.new(
        Base64.urlsafe_decode64(ENV['IMAGE_SERVICE_PUBLIC_KEY'])
      )
      @iss = opts[:iss] ||= ENV['IMAGE_SERVICE_URL'] # Image service is producing tokens for US to consume
      @aud = opts[:aud] ||= ENV['JWT_AUD'] # We are the AUD for this token so it will be our URI.
    end

    # Decodes jwts generated by image service and validates them against their public key
    def call(jwt)
      ImageServiceToken.new(decode_jwt(jwt))
    end

    private

      def decode_jwt(jwt)
        JWT.decode(jwt, @public_key,
                   true, # Verify the signature of this token
                   algorithm: 'RS256',
                   iss: iss,
                   verify_iss: true,
                   aud: aud,
                   verify_aud: true, exp_leeway: 10, nbf_leeway: 10).first
      end
  end
end
